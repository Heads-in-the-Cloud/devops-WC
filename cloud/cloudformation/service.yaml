AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select a VPC that allows instances to access the Internet.
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  ContainerPort:
    Type: Number
    Default: 5000
    Description: port to use for task def/target group/service
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster.

  #Task definition parameters
  UsersImage:
    Type: String
    Description: ECR image for users
  FlightsImage:
    Type: String
    Description: ECR image for flights
  BookingsImage:
    Type: String
    Description: ECR image for bookings
  FrontendImage:
    Type: String
    Description: ECR image for frontend
  IamRole:
    Type: String
    Description: Task Defintion taskExecutionRoleArn
  UsersFamily:
    Type: String
    Description: Users task definition family
  FlightsFamily:
    Type: String
    Description: Flights task definition family
  BookingsFamily:
    Type: String
    Description: Bookings task definition family
  FrontendFamily:
    Type: String
    Description: Frontend task definition family
  UsersContainer:
    Type: String
    Description: Users container name
  FlightsContainer:
    Type: String
    Description: Flights container name
  BookingsContainer:
    Type: String
    Description: Bookings container name
  FrontendContainer:
    Type: String
    Description: Frontend container name
  DbUserArn:
    Type: String
    Description: SSM db username
  DbPasswordArn:
    Type: String
    Description: SSM db password
  SecretKeyArn:
    Type: String
    Description: SSM secret key

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Alb Security Group
      VpcId: !Ref VpcId
  AlbSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  AlbSecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  AlbSecurityGroupALBports:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref AlbSecurityGroup
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref AlbSecurityGroup
  UsersTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref UsersFamily
      ContainerDefinitions:
        - Name: !Ref UsersContainer
          Cpu: '10'
          Essential: 'true'
          Image: !Ref UsersImage
          Memory: '300'
          PortMappings: 
            - ContainerPort: !Ref ContainerPort
          Environment: 
            - Name: USERS_PORT
              Value: !Ref ContainerPort
            - Name: DB_USER
              Value: !Join [ '', [ '{{resolve:', 'secretsmanager:prod/Walter/secrets:SecretString:db_password', '}}' ] ]
            # - Name: DB_PASSWORD
            #   Value: '{{resolve:secretsmanager:prod/Walter/secrets:SecretString:db_password}}'
            # - Name: SECRET_KEY
            #   Value: '{{}}'
          # Secrets: 
          #   - Name: DB_USER
          #     ValueFrom: !Ref DbUserArn
          #   - Name: DB_USER_PASSWORD
          #     ValueFrom: !Ref DbPasswordArn
          #   - Name: SECRET_KEY
          #     ValueFrom: !Ref SecretKeyArn
      Cpu: "1vCPU"
      ExecutionRoleArn: !Ref IamRole
      Memory: "2GB"
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
        - "FARGATE"
      TaskRoleArn: !Ref IamRole
  # FlightsTaskDef:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Ref FlightsFamily
  #     ContainerDefinitions: 
  #       - Name: !Ref FlightsContainer
  #         Image: !Ref FlightsImage
  #         Cpu: '10'
  #         Memory: '300'
  #         Essential: 'true'
  #         PortMappings: 
  #           - ContainerPort: !Ref ContainerPort
  #         # Environment: 
  #         #   - Name: FLIGHTS_PORT
  #         #     Value: !Ref ContainerPort
  #         Secrets: 
  #           - Name: DB_USER
  #             ValueFrom: 'blahlasdlfkjalsdkfjasdflk'
  #           # - Name: DB_USER_PASSWORD
  #           #   ValueFrom: '{{resolve:secretsmanager:prod/Walter/secrets:SecretString:db_password}}'
  #           # - Name: SECRET_KEY
  #           #   ValueFrom: '{{resolve:secretsmanager:prod/Walter/secrets:SecretString:secret_key}}'
  #     Cpu: "1vCPU"
  #     ExecutionRoleArn: !Ref IamRole
  #     Memory: "2GB"
  #     NetworkMode: "awsvpc"
  #     RequiresCompatibilities: 
  #       - "FARGATE"
  #     TaskRoleArn: !Ref IamRole

  # BookingsTaskDef:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Ref BookingsFamily
  #     ContainerDefinitions: 
  #       - Name: !Ref BookingsContainer
  #         Image: !Ref BookingsImage
  #         Cpu: '10'
  #         Memory: '300'
  #         Essential: 'true'
  #         PortMappings: 
  #           - ContainerPort: !Ref ContainerPort
  #         Environment: 
  #           - Name: BOOKINGS_PORT
  #             Value: !Ref ContainerPort
  #         Secrets: 
  #           - Name: DB_USER
  #             ValueFrom: !Ref DbUserArn
  #           - Name: DB_USER_PASSWORD
  #             ValueFrom: !Ref DbPasswordArn
  #           - Name: SECRET_KEY
  #             ValueFrom: !Ref SecretKeyArn
  #     Cpu: "1vCPU"
  #     ExecutionRoleArn: !Ref IamRole
  #     Memory: "2GB"
  #     NetworkMode: "awsvpc"
  #     RequiresCompatibilities: 
  #       - "FARGATE"
  #     TaskRoleArn: !Ref IamRole

  # FrontendTaskDef:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     Family: !Ref FrontendFamily
  #     ContainerDefinitions: 
  #       - Name: !Ref FrontendContainer
  #         Image: !Ref FrontendImage
  #         Cpu: '10'
  #         Memory: '300'
  #         Essential: 'true'
  #         PortMappings: 
  #           - ContainerPort: !Ref ContainerPort
  #         Environment: 
  #           - Name: FRONTEND_PORT
  #             Value: !Ref ContainerPort
  #           # - Name: HOST_DOMAIN
  #           #   Value: !GetAtt ECSALB.DNSName
  #         Secrets: 
  #           - Name: DB_USER
  #             ValueFrom: !Ref DbUserArn
  #           - Name: DB_USER_PASSWORD
  #             ValueFrom: !Ref DbPasswordArn
  #           - Name: SECRET_KEY
  #             ValueFrom: !Ref SecretKeyArn
  #     Cpu: "1vCPU"
  #     ExecutionRoleArn: !Ref IamRole
  #     Memory: "2GB"
  #     NetworkMode: "awsvpc"
  #     RequiresCompatibilities: 
  #       - "FARGATE"
  #     TaskRoleArn: !Ref IamRole

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UsersTG
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP
  # FlightsListenerRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref FlightsTG
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /airline/*
  #     ListenerArn: !Ref ALBListener
  #     Priority: 1
  # BookingsListenerRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref BookingsTG
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /booking/*
  #     ListenerArn: !Ref ALBListener
  #     Priority: 2
  # FrontendListenerRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref FrontendTG
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /lms/*
  #     ListenerArn: !Ref ALBListener
  #     Priority: 3
  UsersTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: UsersTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetType: ip
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  # FlightsTG:
  #   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  #   DependsOn: ECSALB
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckPath: /airline/read/airport
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Name: FlightsTG
  #     Port: 80
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     VpcId: !Ref VpcId
  #     TargetType: ip
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  # BookingsTG:
  #   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  #   DependsOn: ECSALB
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckPath: /airline/read/airport
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Name: BookingsTG
  #     Port: 80
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     VpcId: !Ref VpcId
  #     TargetType: ip
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  # FrontendTG:
  #   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  #   DependsOn: ECSALB
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckPath: /airline/read/airport
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Name: FrontendTG
  #     Port: 80
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     VpcId: !Ref VpcId
  #     TargetType: ip
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  UsersService:
    Type: 'AWS::ECS::Service'
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCapacity
      LaunchType: "FARGATE"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups: 
            - !Ref EcsSecurityGroup
          Subnets: 
            - !Ref Subnet1
            - !Ref Subnet2
      LoadBalancers:
        - ContainerName: !Ref UsersContainer
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref UsersTG
      # Role: !Ref ECSServiceRole
      TaskDefinition: !Ref UsersTaskDef
  # FlightsService:
  #   Type: 'AWS::ECS::Service'
  #   DependsOn: FlightsListenerRule
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: !Ref DesiredCapacity
  #     LaunchType: "FARGATE"
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: "ENABLED"
  #         SecurityGroups: 
  #           - !Ref EcsSecurityGroup
  #         Subnets: 
  #           - !Ref Subnet1
  #           - !Ref Subnet2
  #     LoadBalancers:
  #       - ContainerName: !Ref FlightsContainer
  #         ContainerPort: !Ref ContainerPort
  #         TargetGroupArn: !Ref FlightsTG
  #     # Role: !Ref ECSServiceRole
  #     TaskDefinition: !Ref FlightsTaskDef
  # BookingsService:
  #   Type: 'AWS::ECS::Service'
  #   DependsOn: BookingsListenerRule
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: !Ref DesiredCapacity
  #     LaunchType: "FARGATE"
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: "ENABLED"
  #         SecurityGroups: 
  #           - !Ref EcsSecurityGroup
  #         Subnets: 
  #           - !Ref Subnet1
  #           - !Ref Subnet2
  #     LoadBalancers:
  #       - ContainerName: !Ref BookingsContainer
  #         ContainerPort: !Ref ContainerPort
  #         TargetGroupArn: !Ref BookingsTG
  #     # Role: !Ref ECSServiceRole
  #     TaskDefinition: !Ref BookingsTaskDef
  # FrontendService:
  #   Type: 'AWS::ECS::Service'
  #   DependsOn: FrontendListenerRule
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: !Ref DesiredCapacity
  #     LaunchType: "FARGATE"
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: "ENABLED"
  #         SecurityGroups: 
  #           - !Ref EcsSecurityGroup
  #         Subnets: 
  #           - !Ref Subnet1
  #           - !Ref Subnet2
  #     LoadBalancers:
  #       - ContainerName: !Ref FrontendContainer
  #         ContainerPort: !Ref ContainerPort
  #         TargetGroupArn: !Ref FrontendTG
  #     # Role: !Ref ECSServiceRole
  #     TaskDefinition: !Ref FrontendTaskDef
# Outputs:
#   ecsservice:
#     Value: !Ref service
#   ecscluster:
#     Value: !Ref ECSCluster
#   ECSALB:
#     Description: Your ALB DNS URL
#     Value: !Join 
#       - ''
#       - - !GetAtt 
#           - ECSALB
#           - DNSName
#   taskdef:
#     Value: !Ref taskdefinition
pipeline {
    agent any

    stages{
        stage('retrieve secrets'){
            steps{
                script{

                    env.DB_HOST = sh ( script: 'aws secretsmanager get-secret-value --secret-id prod/Walter/secrets --region us-west-2  | jq --raw-output .SecretString | jq -r ."db_host"', returnStdout: true).trim()
                    env.SECRET_KEY = sh ( script: 'aws secretsmanager get-secret-value --secret-id prod/Walter/secrets --region us-west-2  | jq --raw-output .SecretString | jq -r ."secret_key"', returnStdout: true).trim()
                    env.DB_USER = sh ( script: 'aws secretsmanager get-secret-value --secret-id prod/Walter/secrets --region us-west-2  | jq --raw-output .SecretString | jq -r ."db_username"', returnStdout: true).trim()
                    env.DB_USER_PASSWORD = sh ( script: 'aws secretsmanager get-secret-value --secret-id prod/Walter/secrets --region us-west-2  | jq --raw-output .SecretString | jq -r ."db_password"', returnStdout: true).trim()
                    env.AWS_REGION = "${region}"
                    env.HOSTED_ZONE = "${HOSTED_ZONE}"
                    env.CLUSTER_NAME = "${CLUSTER_NAME_WC}"
                    env.RECORD_NAME = "utopia-wc.hitwc.link"

                    
                }
            }
        } 
        stage('create cluster'){
            when {
                expression { 
                   return params.action == 'up'
                }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-key-WC', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {

                    dir("cloud/kubernetes") {
                        sh 'chmod +x up.sh'
                        sh './up.sh'
                    }
                }
            }
        }
        stage('delete cluster'){
                    when {
                        expression { 
                        return params.action == 'down'
                        }
                    }
                    steps {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-key-WC', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {

                            dir("cloud/kubernetes") {
                                sh 'chmod +x down.sh'
                                sh './down.sh'
                            }
                        }
                    }
                }
    }



}
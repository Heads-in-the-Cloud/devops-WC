apiVersion: apps/v1
kind: Deployment
metadata:
  name: flights-deployment
  namespace: kube-system
  labels:
    app: flights-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flights-microservice
  template:
    metadata:
      labels:
        app: flights-microservice
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: flights-microservice
        image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/wc-flights-api:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: $HEALTH_CHECK
            port: $CONTAINER_PORT
          initialDelaySeconds: 15
          periodSeconds: 30
        env:
          - name: FLIGHTS_PORT
            value: "$CONTAINER_PORT"
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: db_host
                name: db-info
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: db_user
                name: db-info
          - name: DB_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_user_password
                name: db-info
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret_key
                name: jwt-secret
        ports:
          - containerPort: $CONTAINER_PORT

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookings-deployment
  namespace: kube-system
  labels:
    app: bookings-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bookings-microservice
  template:
    metadata:
      labels:
        app: bookings-microservice
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: bookings-microservice
        image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/wc-bookings-api:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: $HEALTH_CHECK
            port: $CONTAINER_PORT
          initialDelaySeconds: 15
          periodSeconds: 30
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: db_host
                name: db-info
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: db_user
                name: db-info
          - name: DB_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_user_password
                name: db-info
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret_key
                name: jwt-secret
          - name: BOOKINGS_PORT
            value: "$CONTAINER_PORT"
        ports:
          - containerPort: $CONTAINER_PORT

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-deployment
  namespace: kube-system
  labels:
    app: users-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-microservice
  template:
    metadata:
      labels:
        app: users-microservice
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: users-microservice
        image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/wc-users-api:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: $HEALTH_CHECK
            port: $CONTAINER_PORT
          initialDelaySeconds: 15
          periodSeconds: 30
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: db_host
                name: db-info
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: db_user
                name: db-info
          - name: DB_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_user_password
                name: db-info
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret_key
                name: jwt-secret
        ports:
          - containerPort: $CONTAINER_PORT

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: kube-system
  labels:
    app: frontend-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-microservice
  template:
    metadata:
      labels:
        app: frontend-microservice
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: frontend-microservice
        image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/wc-frontend:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: $HEALTH_CHECK
            port: $CONTAINER_PORT
          initialDelaySeconds: 15
          periodSeconds: 30
        env:
          - name: FRONTEND_PORT
            value: "$CONTAINER_PORT"
          - name: HOST_DOMAIN
            value: $RECORD_NAME
        ports:
          - containerPort: $CONTAINER_PORT

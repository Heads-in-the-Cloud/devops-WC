AWSTemplateFormatVersion: 2010-09-09

Conditions:
  ProdEnv: !Equals [!Ref EnvType, "prod"]
  NotProdEnv: !Not [Condition: ProdEnv]

Transform:
  - 'AWS::CodeDeployBlueGreen'
Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      TrafficRoutingConfig:
        Type: TimeBasedCanary
        TimeBasedCanary:
          StepPercentage: 15
          BakeTimeMins: 5
      Applications:
        - Target:
            Type: 'AWS::ECS::Service'
            LogicalID: UsersService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: ALBListenerHTTP
              TargetGroups:
                - ALBTargetGroupBlue
                - ALBTargetGroupGreen
    Type: 'AWS::CodeDeploy::BlueGreen'


Parameters:
  TestBlueGreenChange:
    Type: String
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues: [prod, dev, test]
    ConstraintDescription: must specify prod, dev, or test.

  AccountId:
    Type: String
    Description: Team Account Id
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select a VPC that allows instances to access the Internet.
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnets for the load balancer
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
  ContainerPort:
    Type: Number
    Default: 5000
    Description: port to use for task def/target group/service
  ClusterName:
    Type: String
    Description: ECS cluster name
  Region:
    Type: String
    Description: AWS region to deploy to

  #Task definition parameters
  UsersRepo:
    Type: String
    Description: ECR image for users

  UsersFamily:
    Type: String
    Description: Users task definition family

  CpuDev:
    Type: String
    Description: task definition cpu usage
    Default: "1vCPU"
  CpuProd:
    Type: String
    Default: "2vCPU"
  MemDev:
    Type: String
    Description: task definition memory usage
    Default: "2GB"
  MemProd:
    Type: String
    Default: "4GB"
  DevDesiredCount:
    Type: Number
    Description: desired count for the task definition
    Default: 1
  ProdDesiredCount:
    Type: Number
    Default: 2
  #https://stackoverflow.com/questions/57213974/aws-cloudformation-containerdefinitions-secrets-assigning-full-secretstring-for
  SSMSecretString:
    Type: String
    Description: the secret string path to access SSM 
  DbHost:
    Type: String
    Description: SSM db host path
  DbUser:
    Type: String
    Description: SSM db username path
  DbPassword:
    Type: String
    Description: SSM db password path
  SecretKey:
    Type: String
    Description: SSM secret key path

  #Target Group Parameters
  UsersHealthCheck:
    Type: String
    Description: health check path


  #Route53 Parameters
  HostedZoneId:
    Type: String
    Description: Hosted Zone ID for HITWC
  RecordName:
    Type: String
    Description: full DNS of our record
  CertificateArn:
    Type: String
    Description: certificate arn for prod environment

Resources:
  ExampleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ec2 access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ExampleSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref UsersService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref UsersFamily
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroupBlue
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref ECSCluster
      Service: !Ref UsersService
      TaskSetId: !GetAtt 
        - BlueTaskSet
        - Id
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterName
      Tags:
        - Key: Name
          Value: !Ref ClusterName
  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Alb Security Group
      VpcId: !Ref VpcId
  AlbSecurityGroupInbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: !If [ ProdEnv, 443, 80 ]
      ToPort: !If [ ProdEnv, 443, 80 ]
      CidrIp: 0.0.0.0/0
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref AlbSecurityGroup

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  BlueTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref UsersFamily
      ContainerDefinitions:
        - Name: !Ref UsersFamily
          Essential: 'true'
          Image: !Join [ '', [!Ref AccountId, '.dkr.ecr.', !Ref Region, '.amazonaws.com/', !Ref UsersRepo ]]
          PortMappings: 
            - ContainerPort: !Ref ContainerPort
          Environment: 
            - Name: Test
              Value: !Ref TestBlueGreenChange
            - Name: USERS_PORT
              Value: !Ref ContainerPort
            - Name: DB_HOST
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref SSMSecretString, ':SecretString:', !Ref DbHost, '}}' ] ]
            - Name: DB_USER
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref SSMSecretString, ':SecretString:', !Ref DbUser, '}}' ] ]
            - Name: DB_USER_PASSWORD
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref SSMSecretString, ':SecretString:', !Ref DbPassword, '}}' ] ]
            - Name: SECRET_KEY
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref SSMSecretString, ':SecretString:', !Ref SecretKey, '}}' ] ]
      Cpu: !If [ProdEnv, !Ref CpuProd, !Ref CpuDev ]
      Memory: !If [ProdEnv, !Ref MemProd, !Ref MemDev ]
      ExecutionRoleArn: !GetAtt 
        - ECSTaskExecutionRole
        - Arn      
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - FARGATE
      # TaskRoleArn: !Ref IamRole #arn:aws:iam::026390315914:role/WC-ecs-task-iam-role

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ExampleSecurityGroup
      Type: application
      IpAddressType: ipv4
  ALBListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: ProdEnv
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupBlue
      Certificates: 
        - CertificateArn: !Ref CertificateArn
      LoadBalancerArn: !Ref ECSALB
      Port: '443'
      Protocol: HTTPS
  ALBListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: NotProdEnv
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref ALBTargetGroupBlue
              Weight: 1
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP
  ALBTargetGroupGreen:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/health'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Name: ALBTargetGroupGreen
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  ALBTargetGroupBlue:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref UsersHealthCheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ALBTargetGroupBlue
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetType: ip
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  ListenerRuleReady:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      ListenerReady: !If [ ProdEnv, !Ref ALBListenerHTTPS, !Ref ALBListenerHTTP ]
  UsersService:
    Type: 'AWS::ECS::Service'
    DependsOn: ListenerRuleReady
    Properties:
      ServiceName: !Ref UsersRepo
      Cluster: !Ref ECSCluster
      DesiredCount: !If [ProdEnv, !Ref ProdDesiredCount, !Ref DevDesiredCount ]
      DeploymentController:
        Type: EXTERNAL
      Tags:
        - Key: Name
          Value: UsersService

  Route53:
    Type: AWS::Route53::RecordSet
    Properties: 
      ResourceRecords:
        - !GetAtt ECSALB.DNSName
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref RecordName
      Type: 'CNAME'
      TTL: '300'

pipeline {
    agent any 

    stages {
        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            choice(
                                choices: ['dev', 'prod', 'test'], 
                                name: 'environment'
                            ),
                            [$class: 'ChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: 'Select the action to perform', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'action', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['Could not load actions']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['create','update']"
                                    ]
                                ]
                            ],
                            [$class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: 'Select the container to update',
                                name: 'container', 
                                referencedParameters: 'action', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['Could not get Environment from Env Param']"
                                            ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: '''
                                            if (action.equals("create")){
                                                return[]
                                            }
                                            else{
                                                return["users","flights","bookings","frontend"]
                                            }
                                            '''
                                    ] 
                                ]
                            ]
                        ])
                    ])
                }
            }
        }

        stage('setup environment'){
            steps{
                script{
                    env.AWS_DEFAULT_REGION  = "$REGION_WC"
                    env.VPC_ID              = sh (script: "aws ec2 describe-vpcs --filter Name=tag:Name,Values=${WC_vpc_name}-dev | jq '.[] | .[].VpcId'", returnStdout: true).trim().replaceAll("\"", "")
                    env.PRIVATE_SUBNET1     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PRIVATE_SUBNET2     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET1      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET2      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                    env.STACK_NAME          = "${CF_STACK_WC}-${params.environment}"
                    env.STACK_EXISTS        = true
                }
            }
        }
        stage('check if stack exists'){
            steps{
                script {
                    try {
                        aws cloudformation describe-stacks --stack-name "${STACK_NAME}"
                        echo 'hello'
                    }
                    catch (Exception e){
                        echo 'stack'
                        STACK_EXISTS        = false
                    }
                }
            }
        }
        stage('update users'){
            when {        
                environment name: 'PARAM_CONTAINER', value: 'users'
            }
            steps{
                script{
                    echo "users"
                    // aws ecs update-service --service wc-utopia-cf-prod-UsersService-L1YPbQtGBD3V --task-definition wc-users-api-prod --force-new-deployment --cluster wc-utopia-cf-prod-ECSCluster-Gm32j12S7Xph
                }
            }
        }
        stage('update flights'){
            when {        
                environment name: 'PARAM_CONTAINER', value: 'flights'
            }
            steps{
                script{
                    echo "flights"
                    // aws ecs update-service --service wc-utopia-cf-prod-UsersService-L1YPbQtGBD3V --task-definition wc-users-api-prod --force-new-deployment --cluster wc-utopia-cf-prod-ECSCluster-Gm32j12S7Xph
                }
            }
        }
        stage('create'){
            when{
                environment name: 'STACK_EXISTS', value: 'false'
            }
            steps{
                dir('ecs/cloudformation/up'){
                    // sh "aws cloudformation deploy --stack-name ${STACK_NAME} --template-file ./template.yaml --parameter-overrides \
                    //     VpcId=${VPC_ID} \
                    //     PublicSubnet1=${PUBLIC_SUBNET1} \
                    //     PublicSubnet2=${PUBLIC_SUBNET2} \
                    //     PrivateSubnet1=${PRIVATE_SUBNET1} \
                    //     PrivateSubnet2=${PRIVATE_SUBNET2} \
                    //     AccountId=${ORG_ACCOUNT_NUM} \
                    //     HostedZoneId=${HOSTED_ZONE} \
                    //     RecordName=${params.environment}-ecs.wc-utopia.${ROUTE53_DOMAIN} \
                    //     ClusterName=${CLUSTER_NAME_WC} \
                    //     EnvType=${params.environment} \
                    //     ContainerPort=${WC_CONTAINER_PORT} \
                    //     Region=${REGION_WC} \
                    //     UsersRepo=${USER_REPO_WC} \
                    //     FlightsRepo=${FLIGHT_REPO_WC} \
                    //     BookingsRepo=${BOOKING_REPO_WC} \
                    //     FrontendRepo=${FRONTEND_REPO_WC} \
                    //     IamRole=arn:aws:iam::${ORG_ACCOUNT_NUM}:role/ecsTaskExecutionRole \
                    //     UsersFamily=${USER_REPO_WC}-${params.environment}\
                    //     FlightsFamily=${FLIGHT_REPO_WC}-${params.environment} \
                    //     BookingsFamily=${BOOKING_REPO_WC}-${params.environment} \
                    //     FrontendFamily=${FRONTEND_REPO_WC}-${params.environment} \
                    //     LogGroupName=${WC_ECS_LOGS} \
                    //     UsersPath=${WC_USERS_PREFIX} \
                    //     FlightsPath=${WC_FLIGHTS_PREFIX} \
                    //     BookingsPath=${WC_BOOKINGS_PREFIX} \
                    //     FrontendPath=${WC_FRONTEND_PREFIX} \
                    //     SSMSecretString=${WC_SECRETS_PATH_DEV} \
                    //     UsersHealthCheck=${WC_HEALTH_USERS} \
                    //     FlightsHealthCheck=${WC_HEALTH_FLIGHTS} \
                    //     BookingsHealthCheck=${WC_HEALTH_BOOKINGS} \
                    //     FrontendHealthCheck=${WC_HEALTH_FRONTEND} \
                    //     DbHost=db_host \
                    //     DbUser=db_user \
                    //     DbPassword=db_password \
                    //     SecretKey=secret_key"
                    echo create
                }
            }
        }
    }
}
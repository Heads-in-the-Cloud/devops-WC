pipeline {
    agent any 
    environment {
        ELK_LOGIN = credentials("NR_ELK_LOGIN")
    }
    stages {
        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            choice(
                                choices: ['dev', 'prod', 'test'], 
                                name: 'environment'
                            ),
                            [$class: 'ChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: 'Select the action to perform', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'action', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['Could not load actions']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['create','update']"
                                    ]
                                ]
                            ],
                            [$class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: 'Select the container to update',
                                name: 'container', 
                                referencedParameters: 'action', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['Could not get Environment from Env Param']"
                                            ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: '''
                                            if (action.equals("create")){
                                                return[]
                                            }
                                            else{
                                                return["users","flights","bookings","frontend"]
                                            }
                                            '''
                                    ] 
                                ]
                            ]
                        ])
                    ])
                }
            }
        }

        stage('setup environment'){
            steps{
                script{
                    env.AWS_DEFAULT_REGION  = "$REGION_WC"
                    env.VPC_ID              = sh (script: "aws ec2 describe-vpcs --filter Name=tag:Name,Values=${WC_vpc_name}-dev | jq '.[] | .[].VpcId'", returnStdout: true).trim().replaceAll("\"", "")
                    env.PRIVATE_SUBNET1     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PRIVATE_SUBNET2     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET1      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET2      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                    env.CERTIFICATE_ARN     = sh ( script: 'aws secretsmanager get-secret-value --secret-id ${WC_SECRETS_PATH_DEV} --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."cert_manager_arn"', returnStdout: true).trim() 

                    env.STACK_NAME          = "${CF_STACK_WC}-${params.environment}"
                    env.STACK_EXISTS        = true

                }
            }
        }
        stage('check if stack exists'){
            steps{
                script {
                    try {
                        sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME}"
                    }
                    catch (Exception e){
                        env.STACK_EXISTS        = false
                    }
                }
            }
        }
        stage('update users'){
            when {
                allOf{ 
                    expression { params.container == 'users' }
                    environment name: "STACK_EXISTS", value: 'true'
                }
            }
            steps{
                script{
                    sh "aws ecs update-service --service ${USER_REPO_WC} --task-definition ${USER_REPO_WC}-${params.environment} --force-new-deployment --cluster ${CLUSTER_NAME_WC}"
                }
            }
        }
        stage('update flights'){
            when {
                allOf{ 
                    expression { params.container == 'flights' }
                    environment name: "STACK_EXISTS", value: 'true'
                }
            }
            steps{
                script{
                    sh "aws ecs update-service --service ${FLIGHT_REPO_WC} --task-definition ${FLIGHT_REPO_WC}-${params.environment} --force-new-deployment --cluster ${CLUSTER_NAME_WC}"
                }
            }
        }
        stage('update bookings'){
            when {
                allOf{ 
                    expression { params.container == 'bookings' }
                    environment name: "STACK_EXISTS", value: 'true'
                }
            }
            steps{
                script{
                    sh "aws ecs update-service --service ${BOOKING_REPO_WC} --task-definition ${BOOKING_REPO_WC}-${params.environment} --force-new-deployment --cluster ${CLUSTER_NAME_WC}"
                }
            }
        }
        stage('update frontend'){
            when {
                allOf{ 
                    expression { params.container == 'frontend' }
                    environment name: "STACK_EXISTS", value: 'true'
                }
            }
            steps{
                script{
                    sh "aws ecs update-service --service ${FRONTEND_REPO_WC} --task-definition ${FRONTEND_REPO_WC}-${params.environment} --force-new-deployment --cluster ${CLUSTER_NAME_WC}"
                }
            }
        }
        stage('blue/green'){
            steps{
                    sh "aws cloudformation update-stack --stack-name wc-utopia-cf-dev --use-previous-template --parameters \
                            ParameterKey=VpcId,ParameterValue=${VPC_ID} \
                            ParameterKey=PublicSubnet1,ParameterValue=${PUBLIC_SUBNET1} \
                            ParameterKey=PublicSubnet2,ParameterValue=${PUBLIC_SUBNET2} \
                            ParameterKey=PrivateSubnet1,ParameterValue=${PRIVATE_SUBNET1} \
                            ParameterKey=PrivateSubnet2,ParameterValue=${PRIVATE_SUBNET2} \
                            ParameterKey=AccountId,ParameterValue=${ORG_ACCOUNT_NUM} \
                            ParameterKey=HostedZoneId,ParameterValue=${HOSTED_ZONE} \
                            ParameterKey=RecordName,ParameterValue=${params.environment}-ecs.wc-utopia.${ROUTE53_DOMAIN} \
                            ParameterKey=ClusterName,ParameterValue=${CLUSTER_NAME_WC} \
                            ParameterKey=EnvType,ParameterValue=${params.environment} \
                            ParameterKey=ContainerPort,ParameterValue=${WC_CONTAINER_PORT} \
                            ParameterKey=Region,ParameterValue=${REGION_WC} \
                            ParameterKey=UsersRepo,ParameterValue=${USER_REPO_WC} \
                            ParameterKey=FlightsRepo,ParameterValue=${FLIGHT_REPO_WC} \
                            ParameterKey=BookingsRepo,ParameterValue=${BOOKING_REPO_WC} \
                            ParameterKey=FrontendRepo,ParameterValue=${FRONTEND_REPO_WC} \
                            ParameterKey=IamRole,ParameterValue=arn:aws:iam::${ORG_ACCOUNT_NUM}:role/ecsTaskExecutionRole \
                            ParameterKey=UsersFamily,ParameterValue=${USER_REPO_WC}-${params.environment}\
                            ParameterKey=FlightsFamily,ParameterValue=${FLIGHT_REPO_WC}-${params.environment} \
                            ParameterKey=BookingsFamily,ParameterValue=${BOOKING_REPO_WC}-${params.environment} \
                            ParameterKey=FrontendFamily,ParameterValue=${FRONTEND_REPO_WC}-${params.environment} \
                            ParameterKey=LogGroupName,ParameterValue=${WC_ECS_LOGS} \
                            ParameterKey=UsersPath,ParameterValue=${WC_USERS_PREFIX} \
                            ParameterKey=FlightsPath,ParameterValue=${WC_FLIGHTS_PREFIX} \
                            ParameterKey=BookingsPath,ParameterValue=${WC_BOOKINGS_PREFIX} \
                            ParameterKey=FrontendPath,ParameterValue=${WC_FRONTEND_PREFIX} \
                            ParameterKey=SSMSecretString,ParameterValue=${WC_SECRETS_PATH_DEV} \
                            ParameterKey=UsersHealthCheck,ParameterValue=${WC_HEALTH_USERS} \
                            ParameterKey=FlightsHealthCheck,ParameterValue=${WC_HEALTH_FLIGHTS} \
                            ParameterKey=BookingsHealthCheck,ParameterValue=${WC_HEALTH_BOOKINGS} \
                            ParameterKey=FrontendHealthCheck,ParameterValue=${WC_HEALTH_FRONTEND} \
                            ParameterKey=CertificateArn,ParameterValue=${CERTIFICATE_ARN} \
                            ParameterKey=ElasticSearchHost,ParameterValue=${ELK_URL} \
                            ParameterKey=ElasticPort,ParameterValue=443 \
                            ParameterKey=ElasticUser,ParameterValue=${ELK_LOGIN_USR} \
                            ParameterKey=ElasticPassword,ParameterValue=${ELK_LOGIN_PSW} \
                            ParameterKey=LogstashPrefix,ParameterValue=wc-logstash- \
                            ParameterKey=ElasticPath,ParameterValue=/elasticsearch \
                            ParameterKey=DbHost,ParameterValue=db_host \
                            ParameterKey=DbUser,ParameterValue=db_user \
                            ParameterKey=DbPassword,ParameterValue=db_password \
                            ParameterKey=SecretKey,ParameterValue=secret_key"               
                    // ParameterKey=VpcId,UsePreviousValue=True \
                    // ParameterKey=PublicSubnet1,UsePreviousValue=True \
                    // ParameterKey=PublicSubnet2,UsePreviousValue=True \
                    // ParameterKey=PrivateSubnet1,UsePreviousValue=True \
                    // ParameterKey=PrivateSubnet2,UsePreviousValue=True \
                    // ParameterKey=AccountId,UsePreviousValue=True \
                    // ParameterKey=HostedZoneId,UsePreviousValue=True \
                    // ParameterKey=RecordName,UsePreviousValue=True \
                    // ParameterKey=ClusterName,UsePreviousValue=True \
                    // ParameterKey=EnvType,UsePreviousValue=True \
                    // ParameterKey=ContainerPort,UsePreviousValue=True \
                    // ParameterKey=Region,UsePreviousValue=True \
                    // ParameterKey=UsersRepo,UsePreviousValue=True$ \
                    // ParameterKey=FlightsRepo,UsePreviousValue=True \
                    // ParameterKey=BookingsRepo,UsePreviousValue=True \
                    // ParameterKey=FrontendRepo,UsePreviousValue=True \
                    // ParameterKey=IamRole,UsePreviousValue=True \
                    // ParameterKey=UsersFamily,UsePreviousValue=True \
                    // ParameterKey=FlightsFamily,UsePreviousValue=True \
                    // ParameterKey=BookingsFamily,UsePreviousValue=True \
                    // ParameterKey=FrontendFamily,UsePreviousValue=True \
                    // ParameterKey=LogGroupName,UsePreviousValue=True \
                    // ParameterKey=UsersPath,UsePreviousValue=True \
                    // ParameterKey=FlightsPath,UsePreviousValue=True \
                    // ParameterKey=BookingsPath,UsePreviousValue=True \
                    // ParameterKey=FrontendPath,UsePreviousValue=True \
                    // ParameterKey=SSMSecretString,UsePreviousValue=True \
                    // ParameterKey=UsersHealthCheck,UsePreviousValue=True \
                    // ParameterKey=FlightsHealthCheck,UsePreviousValue=True \
                    // ParameterKey=BookingsHealthCheck,UsePreviousValue=True \
                    // ParameterKey=FrontendHealthCheck,UsePreviousValue=True \
                    // ParameterKey=CertificateArn,UsePreviousValue=True \
                    // ParameterKey=ElasticSearchHost,UsePreviousValue=True \
                    // ParameterKey=ElasticPort,UsePreviousValue=True \
                    // ParameterKey=ElasticUser,UsePreviousValue=True \
                    // ParameterKey=ElasticPassword,UsePreviousValue=True \
                    // ParameterKey=LogstashPrefix,UsePreviousValue=True \
                    // ParameterKey=ElasticPath,UsePreviousValue=True \
                    // ParameterKey=DbHost,UsePreviousValue=True \
                    // ParameterKey=DbUser,UsePreviousValue=True \
                    // ParameterKey=DbPassword,UsePreviousValue=True \
                    // ParameterKey=SecretKey,UsePreviousValue=True
                
            }
        }
        stage('create'){
            when{
                environment name: 'STACK_EXISTS', value: 'false'
            }
            steps{
                dir('ecs/cloudformation/up'){
                    sh "aws cloudformation update-stack --stack-name ${STACK_NAME} --capabilities CAPABILITY_IAM --template-file ./template.yaml --parameter-overrides \
                        VpcId=${VPC_ID} \
                        PublicSubnet1=${PUBLIC_SUBNET1} \
                        PublicSubnet2=${PUBLIC_SUBNET2} \
                        PrivateSubnet1=${PRIVATE_SUBNET1} \
                        PrivateSubnet2=${PRIVATE_SUBNET2} \
                        AccountId=${ORG_ACCOUNT_NUM} \
                        HostedZoneId=${HOSTED_ZONE} \
                        RecordName=${params.environment}-ecs.wc-utopia.${ROUTE53_DOMAIN} \
                        ClusterName=${CLUSTER_NAME_WC} \
                        EnvType=${params.environment} \
                        ContainerPort=${WC_CONTAINER_PORT} \
                        Region=${REGION_WC} \
                        UsersRepo=${USER_REPO_WC} \
                        FlightsRepo=${FLIGHT_REPO_WC} \
                        BookingsRepo=${BOOKING_REPO_WC} \
                        FrontendRepo=${FRONTEND_REPO_WC} \
                        IamRole=arn:aws:iam::${ORG_ACCOUNT_NUM}:role/ecsTaskExecutionRole \
                        UsersFamily=${USER_REPO_WC}-${params.environment}\
                        FlightsFamily=${FLIGHT_REPO_WC}-${params.environment} \
                        BookingsFamily=${BOOKING_REPO_WC}-${params.environment} \
                        FrontendFamily=${FRONTEND_REPO_WC}-${params.environment} \
                        LogGroupName=${WC_ECS_LOGS} \
                        UsersPath=${WC_USERS_PREFIX} \
                        FlightsPath=${WC_FLIGHTS_PREFIX} \
                        BookingsPath=${WC_BOOKINGS_PREFIX} \
                        FrontendPath=${WC_FRONTEND_PREFIX} \
                        SSMSecretString=${WC_SECRETS_PATH_DEV} \
                        UsersHealthCheck=${WC_HEALTH_USERS} \
                        FlightsHealthCheck=${WC_HEALTH_FLIGHTS} \
                        BookingsHealthCheck=${WC_HEALTH_BOOKINGS} \
                        FrontendHealthCheck=${WC_HEALTH_FRONTEND} \
                        CertificateArn=${CERTIFICATE_ARN} \
                        ElasticSearchHost=${ELK_URL} \
                        ElasticPort=443 \
                        ElasticUser=${ELK_LOGIN_USR} \
                        ElasticPassword=${ELK_LOGIN_PSW} \
                        LogstashPrefix=wc-logstash- \
                        ElasticPath=/elasticsearch \
                        DbHost=db_host \
                        DbUser=db_user \
                        DbPassword=db_password \
                        SecretKey=secret_key"                
                }
            }
        }
    }
}
pipeline {

    agent any
    stages{
        stage('Setup parameters') {
            steps {           
                    script {
                    properties([
                            parameters([
                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the action to perform', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    name: 'action', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Could not load actions']"
                                        ], 
                                        script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['create','update']"
                                        ]
                                    ]
                                ],
                                [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the container to update',
                                    name: 'container', 
                                    referencedParameters: 'action', 
                                    script: 
                                        [$class: 'GroovyScript', 
                                        fallbackScript: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: "return['Could not get Environment from Env Param']"
                                                ], 
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: '''
                                                if (action.equals("create")){
                                                    return[]
                                                }
                                                else{
                                                    return["users","flights","bookings","frontend"]
                                                }
                                                '''
                                            ] 
                                    ]
                                ]
                            ])
                        ])
                    }
                }
        }
        stage('Set up environment'){
            steps{
                script{
                    env.PARAM_ACTION        = params.action
                    env.PARAM_CONTAINER     = params.container

                    env.AWS_ACCOUNT_ID      = "$ORG_ACCOUNT_NUM"
                    env.AWS_DEFAULT_REGION  = "$REGION_WC"
                    env.ENV                 = "dev"
                    env.VPC_NAME            = "${WC_vpc_name}-${ENV}"
                    env.ELK_URL             = "${WC_ELK}"


                    env.CLUSTER_NAME        = "ECS-Cluster-WC"

                    env.STACK_NAME          = "WC-ecs-alb-stack-${ENV}"
                    env.USERS_SERVICE       = "WC-ecs-users-${ENV}"
                    env.FLIGHTS_SERVICE     = "WC-ecs-flights-${ENV}"
                    env.BOOKINGS_SERVICE    = "WC-ecs-bookings-${ENV}"
                    env.FRONTEND_SERVICE    = "WC-ecs-frontend-${ENV}"
                    env.PORT                = "${WC_CONTAINER_PORT}"

                    env.USERS_TG            = "UsersTG"
                    env.FLIGHTS_TG          = "FlightsTG"
                    env.BOOKINGS_TG         = "BookingsTG"
                    env.FRONTEND_TG         = "FrontendTG"

                    env.ECS_ALB             = "ECSALB"
                    env.ECS_SG              = "EcsSecurityGroup"

                    env.CPU_USERS           = "512"
                    env.CPU_FLIGHTS         = "512"
                    env.CPU_BOOKINGS        = "512"
                    env.CPU_FRONTEND        = "512"

                    env.MEM_USERS           = "2GB"
                    env.MEM_FLIGHTS         = "2GB"
                    env.MEM_BOOKINGS        = "2GB"
                    env.MEM_FRONTEND        = "2GB"

                    env.DESIRED_COUNT_USERS     = 1
                    env.DESIRED_COUNT_FLIGHTS   = 1
                    env.DESIRED_COUNT_BOOKINGS  = 1
                    env.DESIRED_COUNT_FRONTEND  = 1

                    env.CLUSTER_ACTIVE          = false
                    env.CF_STACK_CREATED        = false
                    env.CLUSTER_CREATED         = false

                    env.DB_HOST             = sh ( script: 'aws secretsmanager get-secret-value --secret-id $WC_SECRETS_PATH_DEV --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."db_host"', returnStdout: true).trim()
                    env.SECRET_KEY          = sh ( script: 'aws secretsmanager get-secret-value --secret-id $WC_SECRETS_PATH_DEV --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."secret_key"', returnStdout: true).trim()
                    env.DB_USER             = sh ( script: 'aws secretsmanager get-secret-value --secret-id $WC_SECRETS_PATH_DEV --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."db_user"', returnStdout: true).trim()
                    env.DB_USER_PASSWORD    = sh ( script: 'aws secretsmanager get-secret-value --secret-id $WC_SECRETS_PATH_DEV --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."db_password"', returnStdout: true).trim() 
                    env.CERTIFICATE_ARN     = sh ( script: 'aws secretsmanager get-secret-value --secret-id $WC_SECRETS_PATH_DEV --region ${REGION_WC}  | jq --raw-output .SecretString | jq -r ."cert_manager_arn"', returnStdout: true).trim() 


                    env.VPC_ID              = sh (script: "aws ec2 describe-vpcs --filter Name=tag:Name,Values=${VPC_NAME} | jq '.[] | .[].VpcId'", returnStdout: true).trim().replaceAll("\"", "")
                    env.PRIVATE_SUBNET1     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PRIVATE_SUBNET2     = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/internal-elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET1      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[0]'", returnStdout: true).trim()
                    env.PUBLIC_SUBNET2      = sh( script: "aws ec2 describe-subnets --filters Name=vpc-id,Values=${VPC_ID} Name=tag:kubernetes.io/role/elb,Values=1 --query Subnets[].SubnetId | jq '.[1]'", returnStdout: true).trim()
                }
            }
        }
        stage('Check if cluster is up'){
            steps{
                script {
                    env.cluster=sh ( script: "aws ecs describe-clusters --region ${REGION_WC} --cluster $CLUSTER_NAME  | jq --raw-output .clusters | jq '.[].status'", returnStdout: true).trim().replaceAll("\"", "")
                    echo env.cluster
                    if (env.cluster && env.cluster == "ACTIVE"){
                        echo "cluster is already active"
                        env.CLUSTER_ACTIVE = true
                    }
                }
            }
        }
        stage('Create Cloudformation Stack') {
            when {
                environment name: 'CLUSTER_ACTIVE', value: 'false'
            }
            steps{
                script{
                    dir('ecs/ecs-cli'){

                        sh "aws cloudformation deploy --stack-name ${STACK_NAME} --template-file ./definition_files/alb-cf.yaml --parameter-overrides \
                        VpcId=${VPC_ID} \
                        Subnet1=${PRIVATE_SUBNET1} \
                        Subnet2=${PRIVATE_SUBNET2} \
                        Environment=${ENV} \
                        FlightsPath=${WC_FLIGHTS_PREFIX} \
                        BookingsPath=${WC_BOOKINGS_PREFIX} \
                        FrontendPath=${WC_FRONTEND_PREFIX} \
                        UsersHealthCheck=${WC_HEALTH_USERS} \
                        FlightsHealthCheck=${WC_HEALTH_FLIGHTS} \
                        BookingsHealthCheck=${WC_HEALTH_BOOKINGS} \
                        FrontendHealthCheck=${WC_HEALTH_FRONTEND} \
                        TGNameUsers=${USERS_TG} \
                        TGNameFlights=${FLIGHTS_TG} \
                        TGNameBookings=${BOOKINGS_TG} \
                        TGNameFrontend=${FRONTEND_TG} \
                        HostedZoneId=${HOSTED_ZONE} \
                        RecordName=wc-utopia-ecs.${ROUTE53_DOMAIN}"
                         
                        //wait for cloudformation to finish for outputs then get output ID's
                        sh "aws cloudformation wait stack-create-complete --stack-name $STACK_NAME"                    
                    }
                }
            }
            post {
                success{
                    script {
                        CF_STACK_CREATED = true
                    }
                }
            }
        }
        stage('Get Cloudformation Stack Resource IDs'){
            when { 
                environment name: 'PARAM_ACTION', value: 'create'
            }
            steps{
                script{
                    env.SECURITY_GROUP= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $ECS_SG \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")

                    env.USERS_TG_ARN= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $USERS_TG \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")

                    env.FLIGHTS_TG_ARN= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $FLIGHTS_TG \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")

                    env.BOOKINGS_TG_ARN= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $BOOKINGS_TG \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")

                    env.FRONTEND_TG_ARN= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $FRONTEND_TG \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")
                    
                    env.LOAD_BALANCER_ARN= sh ( script: "aws cloudformation describe-stack-resource \
                                        --stack-name $STACK_NAME \
                                        --logical-resource-id $ECS_ALB \
                                        --query StackResourceDetail.PhysicalResourceId", returnStdout: true).trim().replaceAll("\"", "")

                    env.HOST_DOMAIN = sh ( script: "aws elbv2 describe-load-balancers --load-balancer-arns ${LOAD_BALANCER_ARN} --query LoadBalancers[0].DNSName", returnStdout: true).trim().replaceAll("\"", "")
                }
            }
        }
        stage('Create Cluster'){
            when {
                environment name: 'CLUSTER_ACTIVE', value: 'false'
            }
            steps{
                sh "ecs-cli up --vpc ${VPC_ID} --launch-type FARGATE --region ${REGION_WC}\
                    --capability-iam --cluster-config ${CLUSTER_NAME} \
                    --subnets ${PRIVATE_SUBNET1},${PRIVATE_SUBNET2}"
            }
            post {
                success {
                    script {
                        CLUSTER_CREATED = true
                    }
                }
            }
        }
        stage('Docker Compose Up'){
            parallel {
                stage('Docker compose users'){
                    when {
                        anyOf{          
                            environment name: 'PARAM_CONTAINER', value: 'users'
                            environment name: 'CLUSTER_ACTIVE', value: 'false'
                            }
                        }
                    steps{
                        script{
                            dir("ecs/ecs-cli"){
                                try {
                                    sh 'chmod +x ecs_up/up.sh'
                                    env.CPU_LIMIT       = "$CPU_USERS"
                                    env.MEM_LIMIT       = "$MEM_USERS"
                                    env.SERVICE         = "$USER_REPO_WC"
                                    env.DESIRED_COUNT   = "$DESIRED_COUNT_USERS"
                                    sh "./ecs_up/up.sh $USERS_SERVICE 'DB_USER=${DB_USER},DB_USER_PASSWORD=${DB_USER_PASSWORD},SECRET_KEY=${SECRET_KEY},DB_HOST=${DB_HOST},USERS_PORT=${PORT}' $USERS_TG_ARN"
                                }
                                catch (err) {
                                    echo err.getMessage()

                                }
                            }
                        }
                    }
                }
                stage('Docker compose flights'){
                    when {
                        anyOf{          
                            environment name: 'PARAM_CONTAINER', value: 'flights'
                            environment name: 'CLUSTER_ACTIVE', value: 'false'
                            }
                        }
                    steps{
                        script{
                            dir("ecs/ecs-cli"){
                                try {
                                    sh 'chmod +x ecs_up/up.sh'
                                    env.CPU_LIMIT       = "$CPU_FLIGHTS"
                                    env.MEM_LIMIT       = "$MEM_FLIGHTS"
                                    env.SERVICE         = "$FLIGHT_REPO_WC"
                                    env.DESIRED_COUNT   = "$DESIRED_COUNT_FLIGHTS"
                                    sh "./ecs_up/up.sh $FLIGHTS_SERVICE 'DB_USER=${DB_USER},DB_USER_PASSWORD=${DB_USER_PASSWORD},SECRET_KEY=${SECRET_KEY},DB_HOST=${DB_HOST},FLIGHTS_PORT=${PORT}' $FLIGHTS_TG_ARN"
                                    
                                }
                                catch (err) {
                                    echo err.getMessage()

                                }
                            }
                        }
                    }
                }
                stage('Docker compose bookings'){
                    when {
                        anyOf{          
                            environment name: 'PARAM_CONTAINER', value: 'bookings'
                            environment name: 'CLUSTER_ACTIVE', value: 'false'
                            }
                        }
                    steps{
                        script{
                            dir("ecs/ecs-cli"){
                                try {
                                    sh 'chmod +x ecs_up/up.sh'
                                    env.CPU_LIMIT       = "$CPU_BOOKINGS"
                                    env.MEM_LIMIT       = "$MEM_BOOKINGS"
                                    env.SERVICE         = "$BOOKING_REPO_WC"
                                    env.DESIRED_COUNT   = "$DESIRED_COUNT_BOOKINGS"
                                    sh "./ecs_up/up.sh $BOOKINGS_SERVICE 'DB_USER=${DB_USER},DB_USER_PASSWORD=${DB_USER_PASSWORD},SECRET_KEY=${SECRET_KEY},DB_HOST=${DB_HOST},BOOKINGS_PORT=${PORT}' $BOOKINGS_TG_ARN"

                                }
                                catch (err) {
                                    echo err.getMessage()

                                }
                            }
                        }
                    }
                }
                stage('Docker compose frontend'){
                    when {
                        anyOf{          
                            environment name: 'PARAM_CONTAINER', value: 'frontend'
                            environment name: 'CLUSTER_ACTIVE', value: 'false'
                            }
                        }
                    steps{
                        script{
                            dir("ecs/ecs-cli"){
                                try {
                                    sh 'chmod +x ecs_up/up.sh'
                                    env.CPU_LIMIT       = "$CPU_FRONTEND"
                                    env.MEM_LIMIT       =" $MEM_FRONTEND"
                                    env.SERVICE         = "$FRONTEND_REPO_WC"
                                    env.DESIRED_COUNT   = "$DESIRED_COUNT_FRONTEND"
                                    sh "./ecs_up/up.sh $FRONTEND_SERVICE 'FRONTEND_PORT=${PORT},HOST_DOMAIN=http://${HOST_DOMAIN}' $FRONTEND_TG_ARN"

                                }
                                catch (err) {
                                    echo err.getMessage()
                                }
                            }
                        }
                    }
                }
                stage('Move LoadBalancer to Public Subnets'){
                    when {         
                            environment name: 'CLUSTER_ACTIVE', value: 'false'
                    }
                    steps{
                        script{
                            sh "aws elbv2 set-subnets --load-balancer-arn $LOAD_BALANCER_ARN --subnets $PUBLIC_SUBNET1 $PUBLIC_SUBNET2"
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                dir("ecs/ecs-cli"){

                    if(CLUSTER_CREATED == true) {
                        sh "ecs-cli down --cluster ${CLUSTER_NAME} -f"
                    }
                    if(CF_STACK_CREATED == true) {
                        sh "aws cloudformation delete-stack --stack-name ${STACK_NAME}"
                        sh "aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME"
                    }
                }
            }
        }
    }
}
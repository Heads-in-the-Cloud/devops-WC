---
- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - ./variables.yaml
    
  tasks:

    - name: Creating Users EC2 instance
      ec2:
        instance_type: t2.micro
        key_name: "{{ keypair }}"
        image: "{{ image }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        group_id: "{{ security_group }}"
        assign_public_ip: yes
        count: 1
        wait: true
        instance_tags:
          Name: users_microservice
      register: ec2

    - name: Creating Flights EC2 instance
      ec2:
        instance_type: t2.micro
        key_name: "{{ keypair }}"
        image: "{{ image }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        group_id: "{{ security_group }}"
        assign_public_ip: yes
        count: 1
        wait: true
        instance_tags:
          Name: flights_microservice
      register: flights

    # - name: Creating Bookings EC2 instance
    #   ec2:
    #     instance_type: t2.micro
    #     key_name: "{{ keypair }}"
    #     image: "{{ image }}"
    #     region: "{{ region }}"
    #     aws_access_key: "{{ aws_access_key }}"
    #     aws_secret_key: "{{ aws_secret_key }}"
    #     vpc_subnet_id: "{{ vpc_subnet_id }}"
    #     group_id: "{{ security_group }}"
    #     assign_public_ip: yes
    #     count: 1
    #     wait: true
    #     instance_tags:
    #       Name: bookings_microservice
    #   register: bookings

    - name: Add new instance to users group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 60
        timeout: 320
      loop: "{{ ec2.instances }}"

    - name: Add new instance to flights group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: flight_group
      loop: "{{ flights.instances }}"

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 60
        timeout: 320
      loop: "{{ flights.instances }}"

    # - name: Add new instance to bookings group
    #   add_host:
    #     hostname: "{{ item.public_ip }}"
    #     groupname: booking_group
    #   loop: "{{ bookings.instances }}"

    # - name: Wait for SSH to come up
    #   delegate_to: "{{ item.public_dns_name }}"
    #   wait_for_connection:
    #     delay: 60
    #     timeout: 320
    #   loop: "{{ bookings.instances }}"


- name: Configure instance(s)
  hosts: launched
  become: yes
  vars_files:
    - ./variables.yaml
  tasks:
  - name: Install Docker Service
    command: "yum install docker -y"
  # - name: Install pip
  #   command: "yum install python-pip -y"
  - name: Install Docker Module for Python
    pip:
      name: docker
  - name: "Starting docker service"
    service:
      name: "docker"
      state: started
      enabled: yes
  - name: Pull default Docker image
    docker_image:
      name: waltchang97/utopia-users-microservice
      source: pull
  # - name: Pull Users Microservice
  #   command: "docker pull waltchang97/utopia-users-microservice"
  - name: Run Docker Users Image
    docker_container:
      name: users_microservice
      image: waltchang97/utopia-users-microservice
      state: started
      restart: yes
      ports:
      - "80:5000"
      env:
        SECRET_KEY: "{{ SECRET_KEY }}"
        DB_HOST: "{{ DB_HOST }}"
        DB_USER: "{{ DB_USER }}"
        DB_USER_PASSWORD: "{{ DB_USER_PASSWORD }}"        

- name: Configure instance(s)
  hosts: flight_group
  become: yes
  vars_files:
    - ./variables.yaml
  tasks:
  - name: Install Docker Service
    command: "yum install docker -y"
  - name: Install Docker Module for Python
    pip:
      name: docker
  - name: "Starting docker service"
    service:
      name: "docker"
      state: started
      enabled: yes
  - name: Pull default Docker image
    docker_image:
      name: waltchang97/utopia-flights-microservice
      source: pull
  - name: Run Docker Flights Image
    docker_container:
      name: flights_microservice
      image: waltchang97/utopia-flights-microservice
      state: started
      restart: yes
      ports:
      - "80:5001"
      env:
        SECRET_KEY: "{{ SECRET_KEY }}"
        DB_HOST: "{{ DB_HOST }}"
        DB_USER: "{{ DB_USER }}"
        DB_USER_PASSWORD: "{{ DB_USER_PASSWORD }}"   

# - name: Configure instance(s)
#   hosts: booking_group
#   become: yes
#   tasks:
#   - name: Install Docker Service
#     command: "yum install docker -y"
#   - name: Install Docker Module for Python
#     pip:
#       name: docker
#   - name: "Starting docker service"
#     service:
#       name: "docker"
#       state: started
#       enabled: yes
#   - name: Pull default Docker image
#     docker_image:
#       name: waltchang97/utopia-bookings-microservice
#       source: pull
#   - name: Run Docker Bookings Image
#     docker_container:
#       name: bookings_microservice
#       image: waltchang97/utopia-bookings-microservice
#       state: started
#       restart: yes
#       ports:
#       - "80:5002"
#       env:
        # SECRET_KEY: "{{ SECRET_KEY }}"
        # DB_HOST: "{{ DB_HOST }}"
        # DB_USER: "{{ DB_USER }}"
        # DB_USER_PASSWORD: "{{ DB_USER_PASSWORD }}"   
---
- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - eks_vars.yaml
    
  tasks:
      ##########################
      ######  Get VPC ID  ######
      ##########################
    - name: Getting VPC info
      ec2_vpc_net_info:
        region: "{{ REGION }}"
        filters:
          "tag:Name": "{{VPC_NAME}}"
      register: vpc
      

    - name: Setting vpc_id fact
      set_fact:
        VPC_ID: "{{ vpc.vpcs[0].vpc_id }}"


      ##############################
      ######  Get Subnet IDs  ######
      ##############################
    - name: Getting private subnets info
      ec2_vpc_subnet_info:
        region: "{{ REGION }}"
        filters:
          vpc-id: "{{ VPC_ID }}"
          "tag:kubernetes.io/role/internal-elb": "1"
          "tag:kubernetes.io/cluster/UtopiaClusterWC": "shared"
      loop:
        - subnet1
        - subnet2
      register: subnets

    - name: Setting subnet1 fact
      set_fact:
        SUBNET1: "{{ subnets.results[0].subnets[0].id }}"

    - name: Setting subnet2 fact
      set_fact:
        SUBNET2: "{{ subnets.results[0].subnets[1].id }}"


      ##############################
      ######  Create Cluster  ######
      ##############################
     
    # - name: Create EKS cluster
    #   shell: |
    #     eksctl create cluster --name="{{ CLUSTER_NAME }}" --region="{{ REGION }}" --fargate \
    #     --vpc-private-subnets="{{SUBNET1}},{{SUBNET2}}"

      ##############################
      ######  Set Up Cluster  ######
      ##############################

    # - name: Associate Open ID Provider
    #   shell: |
    #     eksctl utils associate-iam-oidc-provider --cluster="{{ CLUSTER_NAME }}" --approve
  
    - name: Create ALB Ingress Controller
      shell: |
        kubectl apply -f "https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/rbac-role.yaml"
        eksctl create iamserviceaccount \
          --name=alb-ingress-controller \
          --namespace=kube-system \
          --cluster="{{ CLUSTER_NAME }}" \
          --attach-policy-arn="arn:aws:iam::{{ AWS_ACCOUNT_ID }}}:policy/ALBIngressControllerIAMPolicy" \
          --override-existing-serviceaccounts \
          --approve

        curl -sS "https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/alb-ingress-controller.yaml" \
            | sed "s/# - --cluster-name=devCluster/- --cluster-name={{ CLUSTER_NAME }}/g" \
            | sed "s/# - --aws-vpc-id=vpc-xxxxxx/- --aws-vpc-id={{ VPC_ID }}}/g" \
            | sed "s/# - --aws-region=us-west-1/- --aws-region={{ REGION }}/g" \
            | kubectl apply -f -

    - name: Set up asdf
      shell: | 
        echo hello
        sleep 200
        echo hello
    # - name: Create Kubernetes Resources
    #   shell: |
    #     echo hello
    #     kubectl apply -f service.yaml -f ingress.yaml -f cloudwatch.yaml
    #     sed -e 's/$AWS_REGION/'"{{ REGION }}"'/g' -e 's/$AWS_ACCOUNT_ID/'"{{ AWS_ACCOUNT_ID }}"'/g' -e 's/$RECORD_NAME/'"http:\/\/{{ RECORD_NAME }}'/g' deployment.yaml | kubectl apply -f -
    #   args:
    #     chdir: "{{ EKS_LOCATION }}"
    #   ##############################
    #   #########  Route 53  #########
    #   ##############################

    - name: Set up Route53
      shell: | 
        sleep 200
        DNS = sh (script: "timeout 200s bash -c 'until kubectl get ingress utopia-ingress --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}'; do : ; done'", returnStdout: true).trim()
        aws route53 change-resource-record-sets --hosted-zone-id "{{ HOSTED_ZONE }}" --change-batch '
          {
              "Comment": "Testing creating a record set"
              ,"Changes": [{
                  "Action"              : "CREATE"
                  ,"ResourceRecordSet"  : {
                  "Name"              : "'{{ ENVIRONMENT }}-{{ RECORD_NAME }}'"
                  ,"Type"             : "CNAME"
                  ,"TTL"              : 120
                  ,"ResourceRecords"  : [{
                      "Value"         : "'{{ DNS }}'"
                  }]
                  }
              }]
              }     

